openapi: 3.0.3
info:
  title: Krypton Server
  description: Documentation for backend of the Krypton Password manager
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Local Develop
  - url: "https://prod.krypton.vanadium.dev"
    description: Krypton Prod
  - url: "https://dev.krypton.vanadium.dev"
    description: Krypton Develop

security:
  - token: []

paths:
  /user:
    get:
      operationId: getUsers
      tags: [User]
      summary: "Query users"
      description: "This endpoint is used to query users by name filtering and pagination. If the name query is not 
      provided, it will query all users."
      parameters:
        - name: name
          in: query
          schema:
            type: string
          required: false
          description: Filter by name of the user
        - name: page
          schema:
            type: integer
            minimum: 0
          in: query
          required: true
          description: Get users by page
      responses:
        200:
          description: Request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
    post:
      operationId: createUser
      tags: [User]
      summary: "Create a user"
      description: "This endpoint is used to create a user and is only available"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [firstname, lastname, username, pubKey]
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                username:
                  type: string
                pubKey:
                  type: string
      responses:
        200:
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statusResponse"
  /auth/login:
    post:
      security: []
      operationId: login
      tags: [Authentication]
      summary: Login
      description: This endpoint takes the username and returns a token encrypted via the public key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [username]
              properties:
                username:
                  type: string
      responses:
        200:
          description: Username is valid - returning encrypted token
          content:
            application/json:
              schema:
                required: [token]
                properties:
                  token:
                    type: string
        401:
          description: Invalid username
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /me:
    get:
      tags: [Me]
      operationId: getOwnUser
      summary: Get logged in user
      description: This endpoint returns information of the current logged in user
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

components:
  securitySchemes:
    token:
      name: Authentication Token
      type: http
      scheme: bearer
  schemas:
    statusResponse:
      description: Generic response with one status field
      type: object
      required: [status]
      properties:
        status:
          type: string

    error:
      description: An error
      type: object
      required: [correlationId, exception, status, statusCode, message]
      properties:
        correlationId:
          type: string
          format: uuid
        exception:
          type: string
        status:
          type: string
        statusCode:
          type: integer
        message:
          type: string

    user:
      description: A user entity
      type: object
      required: [id, firstname, lastname, username, admin]
      properties:
        id:
          type: string
          format: uuid
        firstname:
          type: string
        lastname:
          type: string
        username:
          type: string
        admin:
          type: boolean
